"""Common type declarations for ai-scalper-god."""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, Iterable, List, Literal, Optional

Direction = Literal["long", "short"]


class Regime(str, Enum):
    """Enumerated market regimes recognised by the system."""

    TREND = "trend"
    RANGE = "range"
    VOLATILE_TREND = "volatile_trend"
    QUIET = "quiet"


@dataclass(slots=True)
class FeatureWindow:
    """Represents a computed feature for a given timestamp and timeframe."""

    name: str
    timeframe: str
    timestamp: datetime
    value: Any


@dataclass(slots=True)
class SignalCandidate:
    """Signal candidate produced by multi-timeframe gates before final scoring."""

    symbol: str
    direction: Direction
    confidence: float
    ttl: int
    invalidation: float
    strategy: str
    metadata: Dict[str, Any] = field(default_factory=dict)

    def is_valid(self, current_time: datetime) -> bool:
        """Return whether the candidate remains tradable."""

        created_at: datetime = self.metadata.get("created_at", current_time)
        delta = current_time - created_at
        return delta.total_seconds() <= float(self.ttl * 60 if self.ttl > 5 else self.ttl)


@dataclass(slots=True)
class OrderRequest:
    """Represents an order to be sent to the execution layer."""

    symbol: str
    direction: Direction
    size: float
    order_type: str
    price: Optional[float]
    stop_loss: Optional[float]
    take_profit: Optional[float]
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass(slots=True)
class StrategyPackState:
    """State of a compiled strategy pack produced by the DSL compiler."""

    name: str
    enabled: bool
    regimes: Iterable[Regime]
    parameters: Dict[str, Any] = field(default_factory=dict)


@dataclass(slots=True)
class RiskLimits:
    """Risk limit snapshot for quick checks during routing."""

    daily_drawdown_pct: float
    max_losing_streak: int
    correlation_limit: float
    spread_cap_bps: float
    latency_cap_ms: float


@dataclass(slots=True)
class ResearchIdea:
    """Represents a new strategy idea generated by research agents."""

    name: str
    description: str
    proposed_by: str
    created_at: datetime
    dsl_snippet: str
    tags: List[str] = field(default_factory=list)
    score: Optional[float] = None


__all__ = [
    "Direction",
    "Regime",
    "FeatureWindow",
    "SignalCandidate",
    "OrderRequest",
    "StrategyPackState",
    "RiskLimits",
    "ResearchIdea",
]
